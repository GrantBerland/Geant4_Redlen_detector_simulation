#!/usr/bin/python3.5

from astroML.stats import fit_bivariate_normal
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Ellipse
import sys

from fncs.fnc_getDetectorHitData import getDetectorHitData

X1, Y1 = getDetectorHitData(detector=1)

X2, Y2 = getDetectorHitData(detector=2)


# Debugging and exit sequence
exc_str = []
if np.std(X1) == 0:
    exc_str.append("X1")
elif np.std(Y1) == 0:
    exc_str.append("Y1")
elif np.std(X2) == 0:
    exc_str.append("X2")
elif np.std(Y2) == 0:
    exc_str.append("Y2")

if exc_str:
    sys.exit(exc_str)

###########################################
# astroML's robust 2D normal fit for detector 1
###########################################

(mu_nr1, sigma1_nr1,
     sigma2_nr1, alpha_nr1) = fit_bivariate_normal(X1, Y1, robust=True)

# Setting up plots
fig = plt.figure()
fig.subplots_adjust(left=0.08, right=0.97, wspace=0.12,
                bottom=0.10, top=0.97)
ax = fig.add_subplot(1,2,1)

# Scatter plot of detector 1 hit data
ax.scatter(X1, Y1, s=2, lw=0, c='k', alpha=0.25)

# Draws 2 sigma standard deviation ellipse
E_2sigma = Ellipse(mu_nr1, sigma1_nr1 * 2, sigma2_nr1 * 2,
            (alpha_nr1 * 180. / np.pi), ec='b', fc='none', linestyle='dotted')

ax.add_patch(E_2sigma)

# Draws 3 sigma standard deviation ellipse
E_3sigma = Ellipse(mu_nr1, sigma1_nr1 * 3, sigma2_nr1 * 3,
            (alpha_nr1 * 180. / np.pi), ec='r', fc='none', linestyle='dotted')

ax.add_patch(E_3sigma)

# Finishing up plots, labels, etc.
ax.set_xlim(-5, 5)
ax.set_ylim(-5, 5)
ax.set_xlabel("x [cm]")
ax.set_ylabel("z [cm]")
ax.text(0.04, 0.96, "Detector 1",
            ha='left', va='top', transform=ax.transAxes)

ax.plot([0], [0], '-b', label='2 sigma')
ax.plot([0], [0], '-r', label='3 sigma')
ax.legend(loc='lower right')


###########################################
### astroML's robust 2D normal fit for detector 2 ###
###########################################

(mu_nr2, sigma1_nr2,
     sigma2_nr2, alpha_nr2) = fit_bivariate_normal(X2, Y2, robust=True)

ax = fig.add_subplot(1,2,2)

# Scatter plot of hit data
ax.scatter(X2, Y2, s=2, lw=0, c='k', alpha=0.25)

E_2sigma = Ellipse(mu_nr2, sigma1_nr2 * 2, sigma2_nr2 * 2,
            (alpha_nr2 * 180. / np.pi), ec='b', fc='none', linestyle='dotted')

ax.add_patch(E_2sigma)

E_3sigma = Ellipse(mu_nr2, sigma1_nr2 * 3, sigma2_nr2 * 3,
            (alpha_nr2 * 180. / np.pi), ec='r', fc='none', linestyle='dotted')

ax.add_patch(E_3sigma)

ax.set_xlim(-5, 5)
ax.set_ylim(-5, 5)
ax.set_xlabel("x [cm]")
ax.text(0.04, 0.96, "Detector 2",
            ha='left', va='top', transform=ax.transAxes)

ax.plot([0], [0], '-b', label='2 sigma')
ax.plot([0], [0], '-r', label='3 sigma')
ax.legend(loc='lower right')

plt.show()
