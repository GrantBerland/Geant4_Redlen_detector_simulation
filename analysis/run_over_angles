
import subprocess
import os
import numpy as np
import pandas as pd

import time
import sys

from fncs.fnc_calc_angle_per_particle import calculateAnglePerParticle
from fncs.write_detector_config_file import writeConfigFile


#####################################
####### Edit these parameters #######
#####################################

angle_resolution = 1
min_angle = -10.
max_angle = 10.

numberOfParticles = 100

pinhole_radius_mm = 0.5
window_gap_mm = 31.5
window_thickness_um = 1000.
foil_t_um = 10.

#####################################
####### ^^^^^^^^^^^^^^^^^^^^^ #######
#####################################


def generateAutoRunFile(theta_in_deg, phi_in_deg, n_particles, energy_in_keV):

    theta = np.deg2rad(theta_in_deg)
    phi = np.deg2rad(phi_in_deg)

    # Calculate the particle starting position such that hit is in the center of the window
    y_offset = -9.5 # cm
    y_window = -3.15 # cm

    z_pos = abs(y_offset-y_window) * np.tan(theta)
    x_pos = abs(y_offset-y_window) * np.tan(phi)

    position_string = str(x_pos) + ' ' + str(y_offset) + ' ' + str(z_pos)

    # Calculate initial momentum direction for particle
    y_dir = 1
    z_dir = -y_dir * np.tan(theta)
    x_dir = -y_dir * np.tan(phi)

    dir_string = str(x_dir) + ' ' + str(y_dir) + ' ' + str(z_dir)

    beam_radius_mm = pinhole_radius_mm
    beam_sigma_mm = pinhole_radius_mm*0.5

    with open('../macros/auto_run_file.mac', 'w') as f:
        f.write('/run/initialize \n')
        f.write('/control/verbose 0 \n')
        f.write('/run/verbose 0 \n')
        f.write('/event/verbose 0 \n')
        f.write('/tracking/verbose 0 \n')

        f.write('/gps/particle e- \n')
        f.write('/gps/pos/type Beam \n')
        f.write('/gps/pos/shape Circle \n')
        f.write('/gps/pos/radius ' + str(beam_radius_mm) + ' mm \n')
        f.write('/gps/pos/sigma_r ' + str(beam_sigma_mm) + ' mm \n')
        f.write('/gps/pos/rot1 1 0 0 \n')
        f.write('/gps/pos/rot2 0 0 1 \n')

        f.write('/gps/energy ' + str(energy_in_keV) + ' keV \n')
        f.write('/gps/pos/centre ' + position_string  + ' cm\n')
        f.write('/gps/direction ' + dir_string + ' \n')

        f.write('/run/beamOn ' + str(n_particles) + ' \n')

def executeAutoRunFile():
    bashCommand = "../build/main ../macros/auto_run_file.mac"
    process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
    output, error = process.communicate()

    if error is not None:
        raise ValueError("Error in simulation")

    if output is None:
        raise ValueError("Error in simulation: no output")

    # Grabs unique particle hit filename from Geant output, removes newline char
    return output[0:12].replace(b'\n', b'').decode("utf-8")

def cleanDataDirectory(hit_fileName):
    if str(hit_fileName) + '.csv' in os.listdir('./data'):
        bashCleanCommand = 'rm ./data/' + str(hit_fileName) + '.csv'
        process = subprocess.Popen(bashCleanCommand.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        output, error = process.communicate()

        if len(error) is not 0:
            pass

    else:
        # Halts execution, since there was probably something wrong with the simulation
        raise FileNotFoundError('File %s not found!' % str(hit_fileName))

def writeHeaderLine(results_fileName):
    with open(results_fileName, 'w') as f:
        f.write('Number_Particles,Theta_actual,Phi_actual,Theta_mean,Theta_std,Phi_mean,Phi_std,'+
                'Theta_median,Phi_median,Theta_normfit,Theta_std_nf,Phi_normfit,Phi_std_nf,'+
                'Theta_skewnormfit,Theta_std_skewnormfit,Phi_skewnormfit,Phi_std_skewnormfit\n')

# Modified range to iterate over floats (i.e. 10.5 degrees, etc.)
def frange(start, stop, step):
     i = start
     while i < stop:
         yield i
         i += step

def main():

    # Energy passed in from command line
    try:
        energy = sys.argv[1]
    except IndexError:
        print('Please enter energy in keV: ')
        energy = input()

    detector_attributes = []
    detector_attributes.append(pinhole_radius_mm)
    detector_attributes.append(window_gap_mm)
    detector_attributes.append(window_thickness_um)
    detector_attributes.append(foil_t_um)

    writeConfigFile(pinhole_radius_mm, window_gap_mm,
                    window_thickness_um, foil_t_um)

    results_fileName = './data/results_' + str(energy) + 'keV_' + str(time.strftime("%H%M%S")) + '.txt'

    # Overwrites whatever results.txt file was already in directory
    writeHeaderLine(results_fileName)

    # adding angle resolution makes the range inclusive on both sides (ie [start, stop])
    for angle in frange(min_angle, max_angle+angle_resolution, angle_resolution):

        # Generates auto run file given the parameters we wish to simulate over
        generateAutoRunFile(theta_in_deg=angle,
                            phi_in_deg=0,
                            n_particles=numberOfParticles,
                            energy_in_keV=energy)

        # Runs simulation with autogenerated run file, outputs raw hit results into data directory
        hit_fileName = executeAutoRunFile()

        # Processes raw hit data into statistical estimates, appends to results.txt
        calculateAnglePerParticle(results_fileName, hit_fileName,
                                  window_gap_mm*0.1-window_thickness_um*0.0001/2-0.05,
                                  -angle, 0, numberOfParticles)

        # Removes any raw hit files that are in data directory
        cleanDataDirectory(hit_fileName)

    print('Simulation at %s keV complete' % energy)
if __name__=='__main__':
    main()
