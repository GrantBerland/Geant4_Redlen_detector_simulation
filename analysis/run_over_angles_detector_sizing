#!/usr/bin/python3.5

import subprocess
import os
import numpy as np
import tqdm
import sys

from fncs.fnc_calc_angle_per_particle import calculateAnglePerParticle
from fncs.plotResultsFile import plotResults
from fncs.write_detector_config_file import writeConfigFile
from fncs.fnc_writeData_convert2pdf import writeData_convert2pdf

def generateAutoRunFile(theta_in_deg, phi_in_deg, n_particles, energy_in_keV):

    theta = np.deg2rad(theta_in_deg)
    phi = np.deg2rad(phi_in_deg)

    # Calculate the particle starting position such that hit is in center of window
    y_offset = -5 # cm
    z_pos = abs(y_offset) * np.tan(theta)
    x_pos = abs(y_offset) * np.tan(phi)

    position_string = str(x_pos) + ' ' + str(y_offset) + ' ' + str(z_pos)

    # Calculate initial momentum direction for particle
    y_dir = 1
    z_dir = y_dir * np.tan(theta)
    x_dir = y_dir * np.tan(phi)

    dir_string = str(x_dir) + ' ' + str(y_dir) + ' ' + str(z_dir)

    with open('../macros/auto_run_file.mac', 'w') as f:
        f.write('/run/initialize \n')
        f.write('/control/verbose 0 \n')
        f.write('/run/verbose 0 \n')
        f.write('/event/verbose 0 \n')
        f.write('/tracking/verbose 0 \n')

        f.write('/gps/particle e- \n')
        f.write('/gps/energy ' + str(energy_in_keV) + ' keV \n')
        f.write('/gps/position ' + position_string  + ' \n')
        f.write('/gps/direction ' + dir_string + ' \n')
        f.write('/gps/pos/type Point \n')

        f.write('/run/beamOn ' + str(n_particles) + ' \n')

def executeAutoRunFile():
    bashCommand = "../build/main ../macros/auto_run_file.mac"
    process = subprocess.Popen(bashCommand.split(), stdout = subprocess.PIPE)
    output, error = process.communicate()

    if error is not None:
        exception("Error in simulation")

    if output is None:
        exception("Error in simulation: no output")

def cleanDataDirectory():
    if len(os.listdir('./data')) > 1:
        bashCleanCommand = 'rm ./data/hits.csv ./data/init_pos.csv'
        process = subprocess.Popen(bashCleanCommand.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        msg, error = process.communicate()

        if error is not None:
            pass
    else:
        return

def writeHeaderLine():
    with open('./data/results.txt', 'w') as f:
        f.write('Number_Particles,Theta_actual,Phi_actual,Theta_mean,Theta_std,Phi_mean,Phi_std,'+
                'Theta_median,Phi_median,Theta_normfit,T_s_nf,Phi_normfit,P_s_nf,Theta_snormfit,T_s_snf,'+
                'Phi_snormfit,P_s_snf\n')

def frange(start, stop, step): # Modified range to iterate over floats (i.e. 10.5 degrees, etc.)
     i = start
     while i < stop:
         yield i
         i += step

def main():

    # Energy passed in from command line
    try:
        energy = sys.argv[1]
    except IndexError:
        print('Please enter energy in keV: ')
        energy = input()

    #####################################
    ####### Edit these parameters #######
    #####################################

    angle_resolution = 1
    min_angle = -20.
    max_angle = 20.

    numberOfParticles = 1000

    #window_thickness_um_array = [ 10., 20., 30., 40., 50.]
    det1_thickness_um_array = [10., 20., 30., 50., 100.]
    numberOfConfigs = len(det1_thickness_um_array)


    #####################################
    ####### ^^^^^^^^^^^^^^^^^^^^^ #######
    #####################################

    for config in range(0, numberOfConfigs):

        detector_attributes = []

        #det1_thickness_um = det1_thickness_um_array[config]
        det1_thickness_um = 20.0

        det2_thickness_um = 100.0

        #distance_between_det_mm = distance_between_det_mm_array[config]
        distance_between_det_mm = 5.

        #window_thickness_um = window_thickness_um_array[config]
        window_thickness_um = 20.0

        window_gap_mm = 1.0

        detector_attributes.append(det1_thickness_um)
        detector_attributes.append(det2_thickness_um)
        detector_attributes.append(distance_between_det_mm)
        detector_attributes.append(window_thickness_um)
        detector_attributes.append(window_gap_mm)

        writeConfigFile(det1_thickness_um, det2_thickness_um, distance_between_det_mm,
        		    window_thickness_um, window_gap_mm)

        # Overwrites whatever results.txt file was already in directory
        writeHeaderLine()

        with tqdm.tqdm(total=100, unit_scale=True) as pbar:
            for angle in frange(min_angle, max_angle, angle_resolution):

                pbar.set_postfix(angle=angle, refresh=True)

                # Generates auto run file given the parameters we wish to simulate over
                generateAutoRunFile(theta_in_deg=angle,
                                    phi_in_deg=0,
                                    n_particles=numberOfParticles,
                                    energy_in_keV=energy)

                # Removes any raw hit files that were already in data directory
                cleanDataDirectory()

                # Runs simulation with autogenerated run file, outputs raw hit results into data directory
                executeAutoRunFile()

                # Processes raw hit data into statistical estimates, appends to results.txt
                calculateAnglePerParticle(distance_between_det_mm/10)

                # Progress bar update
                pbar.update((max_angle-min_angle)/angle_resolution)

        # Plots results.txt and saves file to electron_detector/results directory
        fileName = plotResults(energy)

        writeData_convert2pdf(fileName, detector_attributes)

if __name__=='__main__':
    main()
